@page "/places"
@using WheresTheBeer.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container">
    <h3 class="header">Nearby Places (That Serve Beer!)</h3>

    <!-- Input fields for manual location and range slider -->
    <div class="input-group">
        <input class="input" type="text" placeholder="@manualCoordinatesPlaceholder" @bind="manualCoordinates" />
        <input class="input" type="text" placeholder="Enter your location (city or place name)" @bind="keyword" />
    </div>

    <div class="slider-group">
        <label for="range">Search Radius: @range meters</label>
        <input type="range" id="range" min="100" max="2000" step="100" @bind="range" />
    </div>

    <button class="button" @onclick="GetPlacesWithManualLocation">Get Places</button>

    @if (places != null)
    {
        <ul class="place-list">
            @foreach (var place in places)
            {
                <li class="place-item card">
                    <a href="https://www.google.com/maps?q=@place.Vicinity" target="_blank">
                        <div class="place-header">
                            <!-- Place Icon -->
                            <img src="@place.Icon" alt="@place.Name" width="50" height="50" class="place-icon" />

                            <!-- Place Name and Open Status -->
                            <div class="place-info">
                                <h4 class="place-name">@place.Name</h4>
                                <p class="place-open-status">
                                    Open Now: @(place.OpeningHours?.OpenNow == true ? "Yes" : "No")
                                </p>
                            </div>
                        </div>

                        <!-- Rating and Reviews -->
                        <div class="place-rating">
                            <span class="rating">Rating: @place.Rating</span>
                            <span class="reviews">(@place.UserRatingsTotal reviews)</span>
                        </div>

                        @if (place.PriceLevel != null)
                        {
                            <div class="place-price-level">
                                <span class="price-level">
                                    Price Level:
                                    @for (int i = 0; i < place.PriceLevel; i++)
                                    {
                                        <span>💰</span>
                                    }
                                </span>
                            </div>
                        }

                        <!-- Address -->
                        <p class="place-address">Address: @place.Vicinity</p>

                        <!-- Display First Photo if available -->
                        @if (place.PhotoUrl != null)
                        {
                            <img src="@place.PhotoUrl" alt="Place Photo" class="place-photo" />
                        }
                    </a>
                </li>
            }
        </ul>
    }
    else
    {
        <p class="message">@message</p>
    }
</div>

@code {
    private List<GooglePlace> places;
    private string message = "Waiting for server...";
    private string manualCoordinates = string.Empty;
    private string keyword = string.Empty;
    private string manualCoordinatesPlaceholder = "Fetching your location...";
    private int range = 500;  // Default search range (meters)

    protected override async Task OnInitializedAsync()
    {
        await GetGeolocationAsync();  // Get user's geolocation on component initialization
    }

    private async Task GetGeolocationAsync()
    {
        try
        {
            var position = await JSRuntime.InvokeAsync<Geolocation>("getGeolocation");
            var latitude = position.Latitude;
            var longitude = position.Longitude;

            manualCoordinatesPlaceholder = $"{latitude},{longitude}";  // Set the geolocation as placeholder
            manualCoordinates = $"{latitude},{longitude}";  // Set the coordinates as initial value
        }
        catch (Exception ex)
        {
            message = $"Error getting location: {ex.Message}";
        }
    }

    private async Task GetPlacesWithManualLocation()
    {
        string apiUrl;

        // Prioritize keyword search if the keyword field is populated
        if (!string.IsNullOrEmpty(keyword))
        {
            // Use keyword for the API call (Text Search)
            apiUrl = $"api/googleplaces/keywordsearch?keyword={keyword}&radius={range}";
        }
        else if (!string.IsNullOrEmpty(manualCoordinates))
        {
            // Use coordinates for the API call
            apiUrl = $"api/googleplaces/nearby?location={manualCoordinates}&radius={range}";
        }
        else
        {
            message = "Please provide coordinates or a keyword.";
            return;
        }

        try
        {
            var response = await Http.GetFromJsonAsync<List<GooglePlace>>(apiUrl);

            if (response != null && response.Count > 0)
            {
                places = response;
                message = string.Empty;

                // Load photo URLs for each place asynchronously
                foreach (var place in places)
                {
                    if (place.Photos?.Count > 0 && !string.IsNullOrEmpty(place.Photos[0].PhotoReference))
                    {
                        place.PhotoUrl = await GetPhotoUrl(place.Photos[0].PhotoReference);
                    }
                }
            }
            else
            {
                message = "No places found.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task<string> GetPhotoUrl(string photoReference)
    {
        // Call server-side controller to get the secure photo URL
        var photoUrl = await Http.GetStringAsync($"api/googleplaces/photo?photoReference={photoReference}");
        return photoUrl;
    }

    public class Geolocation
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }
}
