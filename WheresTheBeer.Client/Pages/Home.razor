@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container">
    <h1 class="header">Welcome to WheresTheBeer</h1>

    <p>Your go-to app for finding places that serve beer!</p>

    <p class="message">@message</p>

    <!-- PWA Install Button -->
    <button id="installPWA" class="install-button" style="display: none;">Install</button>

    <button class="button" @onclick="NavigateToPlaces" disabled="@disableButtons">Find Nearby Places</button>
</div>

@code {
    private string message = "Loading... (If this takes more than a few seconds, please refresh.)";
    private bool disableButtons = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializePWAInstall");
            await CheckServerStatusAsync();
        }
    }

    private async Task CheckServerStatusAsync()
    {
        try
        {
            var retries = 3;
            var delay = 2000;

            for (int i = 0; i < retries; i++)
            {
                try
                {
                    var fullUri = new Uri(Http.BaseAddress, "api/test/ping");
                    message = await Http.GetStringAsync(fullUri);
                    Console.WriteLine($"Request succeeded: {fullUri}");
                    disableButtons = false;
                    message = "Ready for places search.";
                    StateHasChanged(); // Force re-render
                    return;
                }
                catch (HttpRequestException)
                {
                    Console.WriteLine("Ping failed, retrying...");
                    await Task.Delay(delay);
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private void NavigateToPlaces()
    {
        NavigationManager.NavigateTo("/places");
    }
}
